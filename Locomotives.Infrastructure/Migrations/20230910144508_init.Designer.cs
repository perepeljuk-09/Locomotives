// <auto-generated />
using System;
using Locomotives.Infrastructure.DataBases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Locomotives.Infrastructure.Migrations
{
    [DbContext(typeof(PgContext))]
    [Migration("20230910144508_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Locomotives.Domain.Entities.Depot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("depot_name");

                    b.HasKey("Id");

                    b.ToTable("depots", "main");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsVacation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_vacation");

                    b.Property<int>("LocomotiveId")
                        .HasColumnType("integer")
                        .HasColumnName("locomotive_id");

                    b.HasKey("Id");

                    b.HasIndex("LocomotiveId");

                    b.ToTable("drivers", "main");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.Locomotive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("locomotive_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepotId")
                        .HasColumnType("integer")
                        .HasColumnName("depot_id");

                    b.Property<int>("LocomotiveCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("locomotive_category_id");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.HasIndex("DepotId");

                    b.HasIndex("LocomotiveCategoryId");

                    b.ToTable("locomotives", "main");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.LocomotiveCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("locomotive_category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryName")
                        .HasColumnType("integer")
                        .HasColumnName("category_name");

                    b.HasKey("Id");

                    b.ToTable("locomotive_categories", "main");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.LocomotiveCategoriesDrivers", b =>
                {
                    b.Property<int>("LocomotiveCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("locomotive_category_id");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.HasKey("LocomotiveCategoryId", "DriverId");

                    b.HasIndex("DriverId");

                    b.ToTable("locomotive_categories_drivers", "main");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.Driver", b =>
                {
                    b.HasOne("Locomotives.Domain.Entities.Locomotive", "Locomotive")
                        .WithMany("Drivers")
                        .HasForeignKey("LocomotiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locomotive");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.Locomotive", b =>
                {
                    b.HasOne("Locomotives.Domain.Entities.Depot", "Depot")
                        .WithMany("Locomotives")
                        .HasForeignKey("DepotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Locomotives.Domain.Entities.LocomotiveCategories", "LocomotiveCategories")
                        .WithMany("Locomotives")
                        .HasForeignKey("LocomotiveCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Depot");

                    b.Navigation("LocomotiveCategories");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.LocomotiveCategoriesDrivers", b =>
                {
                    b.HasOne("Locomotives.Domain.Entities.Driver", "Driver")
                        .WithMany("LocomotiveCategoriesDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Locomotives.Domain.Entities.LocomotiveCategories", "LocomotiveCategory")
                        .WithMany("LocomotiveCategoriesDrivers")
                        .HasForeignKey("LocomotiveCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("LocomotiveCategory");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.Depot", b =>
                {
                    b.Navigation("Locomotives");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.Driver", b =>
                {
                    b.Navigation("LocomotiveCategoriesDrivers");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.Locomotive", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Locomotives.Domain.Entities.LocomotiveCategories", b =>
                {
                    b.Navigation("LocomotiveCategoriesDrivers");

                    b.Navigation("Locomotives");
                });
#pragma warning restore 612, 618
        }
    }
}
